#Librerias
from skimage import io
from skimage import color
import matplotlib.pyplot as plt
import threading
import time
import numpy as np

# Carga de im치genes en forma matricial
lena = color.rgb2gray(io.imread('/content/lena_gray.png'))/255
eiffel = color.rgb2gray(io.imread('/content/eiffel.jpg'))/255
troll = io.imread('/content/trol.png')/255
aguila = io.imread('/content/aguila.jpg')/255
bear = color.rgb2gray(io.imread('/content/Bear.jpg'))/255
boat = color.rgb2gray(io.imread('/content/boat.jpg'))/255
###print(boat.shape)
#Diccionario
imgs = [lena, eiffel, troll, aguila, bear]
names = ['lena', 'eiffel', 'troll', 'aguila', 'bear']
filtros = ['blur', 'sharpen']
fotos = dict(zip(names, imgs))
resultados = {}
for name in names:
    resultados[name] = dict(zip(['blur', 'sharpen'], [[]]*2))

#Funci칩n de convoluci칩n
def conv(img,filtro,c = 1):
  img_ = fotos[img]
  if filtro == 'blur':
    mat = np.ones([3,3])
  else:
    filtro == 'sharpen'
    mat = np.array([[1,-2,1],[-2,5,-2],[1,-2,1]])

  d = np.copy(img_)
  for i in range(1,img_.shape[0]-1):
    for j in range(1,img_.shape[1]-1):
      d[i,j] = (1/c) *np.sum(img_[i-1:i+2,j-1:j+2] * mat)
      resultados[img][filtro] = d

#Hilos para los filtros blur y sharpen en paralelo
start = time.perf_counter()
threads = []
for name in names:
  for filtro in filtros:
    hilo = threading.Thread(target=conv, args=[name, filtro, 1])
    hilo.start()
    threads.append(hilo)

for thread in threads:
  thread.join()
end = time.perf_counter()
print(end-start)

#No paralelo
start = time.perf_counter()
for name in names:
  for filtro in filtros:
    #resultados[name][filtro] = conv(name, filtro, 1)
    conv(name,filtro, 1) 
end = time.perf_counter()
print(end-start)

#Funci칩n que muestra la imagen que se quiere graficar
def graph(name_photo):
    fig, axs = plt.subplots(2, 2, figsize=(15, 9))
    fig.suptitle('Filtros para eiffel')
    axs[0, 0].imshow(resultados[name_photo]['sharpen'], cmap='gray')
    axs[0, 0].set_title('Sharpen')
    axs[1, 0].imshow(resultados[name_photo]['blur'], cmap='gray')
    axs[1, 0].set_title('Blur')
    axs[0, 1].imshow(fotos[name_photo], cmap='gray')
    axs[0, 1].set_title('Original')
    plt.tight_layout()
    plt.show()
graph('bear')
